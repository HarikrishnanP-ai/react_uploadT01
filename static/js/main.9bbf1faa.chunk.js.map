{"version":3,"sources":["Recipe.js","App.js","reportWebVitals.js","index.js"],"names":["Recipe","title","calories","image","ingredients","map","ingredient","text","toFixed","src","alt","App","useState","recipes","setRecipes","search","setSearch","query","setQuery","useEffect","getRecipes","a","fetch","response","json","data","hits","console","log","className","onSubmit","e","preventDefault","type","value","onChange","target","recipe","label","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6OAceA,EAbA,SAAC,GAAsC,IAArCC,EAAoC,EAApCA,MAAMC,EAA8B,EAA9BA,SAASC,EAAqB,EAArBA,MAAMC,EAAe,EAAfA,YACpC,OAAQ,gCACP,wCAAWH,KACX,6BACGG,EAAYC,KAAI,SAAAC,GAAU,OAC3B,+BAAKA,EAAWC,KAAhB,YAEF,0CAAaL,EAASM,QAAQ,MAC9B,qBAAKC,IAAKN,EAAOO,IAAI,S,MC6CTC,MAlDf,WAEE,IAEA,EAA4BC,mBAAS,IAArC,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAAyBF,mBAAS,IAAlC,mBAAOG,EAAP,KAAcC,EAAd,KACA,EAAuBJ,mBAAS,WAAhC,mBAAOK,EAAP,KAAaC,EAAb,KACAC,qBAAW,WACTC,MACA,CAACH,IACH,IAAMG,EAAU,uCAAG,8BAAAC,EAAA,sEACMC,MAAM,mCAAD,OAAoCL,EAApC,mBAThB,WASgB,oBARhB,qCAOK,cACXM,EADW,gBAEEA,EAASC,OAFX,OAEXC,EAFW,OAGjBX,EAAWW,EAAKC,MAChBC,QAAQC,IAAIH,EAAKC,MAJA,2CAAH,qDAoBhB,OACG,sBAAKG,UAAU,MAAf,UACE,uBAAMC,SATO,SAAAC,GAChBA,EAAEC,iBACFd,EAASH,GACTC,EAAU,KAMoBa,UAAU,cAArC,UACE,uBAAOI,KAAK,OAAOJ,UAAU,aAAaK,MAAOnB,EAAQoB,SAf5C,SAAAJ,GACnBf,EAAUe,EAAEK,OAAOF,UAeb,wBAAQD,KAAK,SACZJ,UAAU,gBADX,uBAIF,qBAAKA,UAAU,UAAf,SACChB,EAAQR,KAAI,SAAAgC,GAAM,OAClB,cAAC,EAAD,CAAQpC,MAAOoC,EAAOA,OAAOC,MAC5BpC,SAAUmC,EAAOA,OAAOnC,SACxBC,MAAOkC,EAAOA,OAAOlC,MACrBC,YAAaiC,EAAOA,OAAOjC,uBCnCrBmC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.9bbf1faa.chunk.js","sourcesContent":["import React from 'react';\r\nconst Recipe = ({title,calories,image,ingredients})=>{\r\n  return (<div>\r\n   <h1>Title:{title}</h1>\r\n   <ol>\r\n     {ingredients.map(ingredient =>(\r\n     <li>{ingredient.text} </li>))}\r\n   </ol>\r\n   <p>Calories:{calories.toFixed(3)}</p>\r\n   <img src={image} alt=\"\" />\r\n  </div>\r\n  );\r\n\r\n}\r\nexport default Recipe;","import React,{useEffect,useState} from 'react';\nimport Recipe from './Recipe';\nimport './App.css';\n\nfunction App() {\n\n  const APP_ID= '5abe01d0';\n  const APP_KEY='1af7af56866be00481f0276f587e20c1';\n  const [recipes,setRecipes] =useState([]);\n  const [search,setSearch]=useState(\"\");\n  const [query,setQuery]=useState('chicken')\n  useEffect( ()=>{ \n    getRecipes();\n  },[query]);\n  const getRecipes = async ()=>{\n    const response = await fetch(`https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`);\n    const data = await response.json();\n    setRecipes(data.hits);\n    console.log(data.hits);\n  }\n\n\n  const updateSearch= e =>{\n   setSearch(e.target.value);\n  //  console.log(search);\n  }\n\n  const getSearch = e =>{\n    e.preventDefault();\n    setQuery(search);\n    setSearch(\"\");\n    \n  }\n\n  return (\n     <div className=\"App\">\n       <form onSubmit={getSearch} className=\"search-form\">\n         <input type=\"text\" className=\"search-bar\" value={search} onChange={updateSearch}/>\n         <button type=\"submit\"\n          className=\"search-button\" \n         >submit</button>\n       </form>\n       <div className=\"recipes\">\n       {recipes.map(recipe =>(\n        <Recipe title={recipe.recipe.label}\n         calories={recipe.recipe.calories} \n         image={recipe.recipe.image}\n         ingredients={recipe.recipe.ingredients}/>\n       ))}\n       </div>\n     </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}